import requests
import json
import re

OLLAMA_SERVER_URL = "http://localhost:11434/api/generate"

def generate_code(task_type, model_type, feature_columns, target_column):
    """Generate Python code for regression/classification using Ollama LLM."""

    prompt = f"""
    You are a Python coding expert. Write a complete, executable Python script for:

    - Task Type: {task_type}
    - Model Type: {model_type}
    - Independent Variables: {feature_columns}
    - Target Variable: {target_column}

    The script must:
    1. Import pandas, numpy, sklearn (train_test_split, LabelEncoder, StandardScaler, {model_type.replace(' ', '')}, metrics), plotly.express.
    2. Load a dataset from 'uploaded_dataset.csv'.
    3. Preprocess the data:
       - Use LabelEncoder to encode categorical variables in the independent variables and target (if categorical).
       - Convert all features to numeric using pd.to_numeric (coerce errors to NaN, fill with 0).
       - Scale features with StandardScaler.
    4. Split the data into 80% training and 20% testing sets (random_state=42).
    5. Train a {model_type} model.
    6. Evaluate the model:
       - For Regression: Compute Mean Squared Error (MSE) and R¬≤ Score, and create a residual plot.
       - For Classification: Compute Accuracy and print a Classification Report.
    7. For Regression, use plotly.express to create a residual plot with the following EXACT syntax:
       fig = px.scatter(x=y_test, y=residuals, title='Residual Analysis', labels={{'x': 'Actual Values', 'y': 'Residuals'}})
       fig.add_hline(y=0, line_dash='dash', line_color='red')
       fig.show()
    8. Print the performance metrics to the console.

    Return ONLY the raw Python code as a single block, without markdown formatting (e.g., no ``` or extra text).
    """

    payload = {
        "model": "llama2:latest",
        "prompt": prompt,
        "stream": False
    }

    try:
        response = requests.post(OLLAMA_SERVER_URL, json=payload, timeout=30)
        response.raise_for_status()
        response_data = response.json()
        print("üîπ Ollama API Response:", response_data)
        generated_code = response_data.get("response", "‚ö†Ô∏è No code generated by Ollama.")
        # Clean up the generated code
        generated_code = generated_code.strip()
        # Remove markdown if present
        generated_code = re.sub(r'```(?:python)?\n?', '', generated_code)
        # Fix common dictionary syntax errors (e.g., missing colon)
        generated_code = re.sub(r"'x'\s+'Actual Values'", "'x': 'Actual Values'", generated_code)
        if not generated_code or generated_code.startswith("‚ö†Ô∏è"):
            generated_code = "‚ö†Ô∏è Empty or invalid response from Ollama."
        print("üîπ Generated Code:\n", generated_code)
        return generated_code
    except requests.exceptions.RequestException as e:
        error_msg = f"‚ö†Ô∏è API Error: {str(e)}"
        print(error_msg)
        return error_msg